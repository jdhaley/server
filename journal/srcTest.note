<s>
	<s value="public type any:">
		<s value="eq: (value: any) ^ any"/>
		<s value="ne: (value: any) ^ any"/>
		<s value="and: (defer value: any) ^ any"/>
		<s value="or: (defer value: any) ^ any"/>
		<s value="then: (defer true: any, defer false: any) ^ any"/>
		<s value="str: string"/>
		<s value="num: number"/>
	</s>
	<s value="public type void: any"/>
	<s value="public type object: any"/>
	<s value="public type array: strand"/>
	<s value="public type function: any">
		<s value="apply: (receiver: any, args: array ^ any) ^ any"/>
	</s>
	<s value="public type boolean: any"/>
	<s value="public type number: any">
		<s value="neg: number"/>
		<s value="add: (value: number) ^ number"/>
		<s value="sub: (value: number) ^ number"/>
		<s value="mul: (value: number) ^ number"/>
		<s value="div: (value: number) ^ number"/>
		<s value="mod: (value: number) ^ number"/>
		<s value="gt: (value: number) ^ number"/>
		<s value="lt: (value: number) ^ number"/>
		<s value="ge: (value: number) ^ number"/>
		<s value="le: (value: number) ^ number"/>
	</s>
	<s value="public type string: strand ^ string"/>
	<s value="public type type: container">
		<s value="generalizes: (type: type) ^ boolean"/>
		<s value="categorizes: (value: any) ^ boolean"/>
	</s>
	<s value="public type container: object">
		<s value="at: (key: any) ^ contained"/>
	</s>
	<s value="public type contained: any"/>
	<s value="public type strand: container">
		<s value="length: number"/>
		<s value="at: (value: number) ^ contained"/>
		<s value="indexOf: (search: contained, opt start: number) ^ number"/>
		<s value="slice: (start: number, opt end: number) ^ number"/>
		<s value="concat: (rest values: contained) ^ strand"/>
	</s>
	<s value="test: object">
		<s value="&quot;an expression&quot;: number">
			<section>A statement can contain a comment section. A key can be a string.</section>
			<s value="this[&quot;hello, world&quot;] slice(0, 5) indexOf(&quot;o&quot;)" />
		</s>
		<s value="other: string">
			<s value="&quot;hello&quot;" />
		</s>
		<s value="get factor: (this: void, num: number, value: number) ^ number">
			<section>This is a silly little function for testing.</section>
			<s value="if: num">
				<s value="return: num add(value) mul(5)" />
			</s>
			<s value="else if: num eq(2)">
				<s value="num = 4" />
				<s value="return: num" />
			</s>
			<s value="else:">
				<s value="return: 3" />
			</s>
		</s>
	</s>
	<s value="const static test2: array">
		<s value="10" />
		<s value="&quot;hello&quot;" />
		<s value="20" />
		<s value="30" />
	</s>
</s>